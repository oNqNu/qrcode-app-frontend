/* eslint-disable @next/next/no-img-element */
import type { NextPage } from 'next';
import { Button, Flex, Heading, Text } from '@chakra-ui/react';
import Head from 'next/head';
import { useState } from 'react';
import ReactCrop, { Crop } from 'react-image-crop';
import 'react-image-crop/dist/ReactCrop.css';

const CropImg: NextPage = () => {
  const [imgStr, setImgStr] = useState('');
  const [isGetOriginalImgSize, setIsGetOriginalImgSize] = useState(false);
  const [isgeneratedQrcode, setIsgeneratedQrcode] = useState(false);
  const [parameters, setParameters] = useState({
    central_x_coordinate: '',
    central_y_coordinate: '',
    y_axis: '',
    x_axis: '',
    scale: '',
  });
  const [originalImgSize, setOriginalImgSize] = useState({
    x: 0,
    y: 0,
  });
  const [crop, setCrop] = useState<Crop>({
    unit: 'px', // Can be 'px' or '%'
    x: 25,
    y: 25,
    width: 50,
    height: 50,
  });

  function getImgSize() {
    console.log('execute getImgSize');
    var element: HTMLImageElement | null = document.getElementById(
      'crop'
    ) as HTMLImageElement;
    if (element == null) return;
    var width = element.naturalWidth;
    var height = element.naturalHeight;
    handleChangeOriginalImgSize('x', width);
    handleChangeOriginalImgSize('y', height);
    setIsGetOriginalImgSize(true);
  }

  function calculateParameters() {
    handleChangeParameter(
      'central_x_coordinate',
      String(crop.x + crop.width / 2)
    );
    handleChangeParameter(
      'central_y_coordinate',
      String(crop.y + crop.width / 2)
    );
    handleChangeParameter(
      'x_axis',
      String((crop.x + crop.width / 2) / originalImgSize.x)
    );
    handleChangeParameter(
      'y_axis',
      String((crop.y + crop.height / 2) / originalImgSize.y)
    );

    if (originalImgSize.x >= originalImgSize.y) {
      handleChangeParameter('scale', String(crop.height / originalImgSize.y));
    } else {
      handleChangeParameter('scale', String(crop.width / originalImgSize.x));
    }
  }

  function handleChangeParameter(name: string, value: string) {
    console.log(`${name};${value}`);
    setParameters((prev) => ({ ...prev, [name]: value }));
  }

  function handleChangeOriginalImgSize(name: string, value: number) {
    console.log(`${name};${value}`);
    setOriginalImgSize((prev) => ({ ...prev, [name]: value }));
  }

  return (
    <div>
      <Head>
        <title>Design QRcode Generator</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Flex flexDirection={'column'} alignItems={'center'} py={'12'}>
        <Heading size={'3xl'}>Design QRcode Generator</Heading>
        <Text fontSize={'2xl'} pt={'4'}>
          画像切り抜き処理サンプル
        </Text>
        <ReactCrop
          crop={crop}
          aspect={1}
          onChange={(c) => {
            if (!isGetOriginalImgSize) getImgSize();
            setCrop(c);
            console.log(crop);
            calculateParameters();
          }}
        >
          <img id="crop" src="/abe.jpg" alt="切り抜き前画像" />
        </ReactCrop>
        <Flex mt="4" gap="8">
          <Button
            colorScheme="facebook"
            onClick={() => {
              getImgSize();
            }}
          >
            画像サイズ取得
          </Button>
          <Button
            colorScheme="green"
            onClick={() => {
              console.log('clicked 必要パラメータ算出 button');
              console.log(parameters);
            }}
          >
            必要パラメータを算出
          </Button>
        </Flex>
      </Flex>
    </div>
  );
};

export default CropImg;
