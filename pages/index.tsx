/* eslint-disable @next/next/no-img-element */
import type { NextPage } from 'next';
import Image from 'next/image';
// import { Image as NextImage } from 'next/image';
import Head from 'next/head';
import axios from 'axios';
import ReactCrop, { Crop } from 'react-image-crop';
import 'react-image-crop/dist/ReactCrop.css';
import {
  chakra,
  Heading,
  Text,
  Flex,
  FormLabel,
  FormControl,
  Input,
  Button,
  Center,
} from '@chakra-ui/react';
import { useState } from 'react';
import { BiDownload } from 'react-icons/bi';
import { formItems } from './assets';

const Home: NextPage = () => {
  enum DisplayMode {
    SelectImg = 'select img',
    CropImg = 'scrop img',
    InputParameter = 'input parameter',
  }

  const [formValues, setFormValues] = useState({
    img_string: '',
    data: 'https://www.okayama-u.ac.jp',
    version: '5',
    ecc_level: '0',
    encoding: '0',
    mask_pattern: '0',
    traial_times: '100',
    threshold: '96',
    scale: '50',
    variance: '0.7',
    y_axis: '0.5',
    x_axis: '0.5',
  });
  const [resultImgStr, setresultImgStr] = useState('');
  const [selectedImgStr, setSelectedImgStr] = useState('');
  const [isDisplayResult, setIsDisplayResult] = useState(false);
  const [selectedImageSize, setSelectedImageSize] = useState({ x: 0, y: 0 });
  const [isGetOriginalImgSize, setIsGetOriginalImgSize] = useState(false);
  const [originalImgSize, setOriginalImgSize] = useState({
    x: 0,
    y: 0,
  });
  const [displayMode, setDisplayMode] = useState<DisplayMode>(
    DisplayMode.SelectImg
  );

  const [parameters, setParameters] = useState({
    central_x_coordinate: '',
    central_y_coordinate: '',
    y_axis: '',
    x_axis: '',
    scale: '',
  });

  const [crop, setCrop] = useState<Crop>({
    unit: 'px', // Can be 'px' or '%'
    x: 100,
    y: 100,
    width: 150,
    height: 150,
  });

  async function onSubmit() {
    console.log(formValues);
    try {
      const response = await axios.post(
        'http://localhost:8080/api/post_test2',
        formValues
      );
      setresultImgStr(response.data);
      setIsDisplayResult(true);
      console.log(response.data);
      console.log('いけてんで');
    } catch (error) {
      console.error(error);
    }
  }

  function handleOnAddImage(e: React.ChangeEvent<HTMLInputElement>) {
    if (!e.target.files) return;
    const reader = new FileReader();
    const img: File = e.target.files[0];

    if (img == null) return;

    reader.readAsDataURL(img);
    reader.onload = () => {
      if (reader.result == null) return;
      console.log('フォームで選択された画像(base64)');
      console.log(reader.result);

      const data_uri = reader.result;
      console.log(data_uri);
      handleChangeFormValues('img_string', data_uri);
      console.log(formValues);
    };
    setDisplayMode(DisplayMode.CropImg);
  }
  function calculateParameters() {
    handleChangeParameter(
      'central_x_coordinate',
      String(crop.x + crop.width / 2)
    );
    handleChangeParameter(
      'central_y_coordinate',
      String(crop.y + crop.width / 2)
    );
    handleChangeParameter(
      'x_axis',
      String(roundFloat((crop.x + crop.width / 2) / originalImgSize.x))
    );
    handleChangeParameter(
      'y_axis',
      String(roundFloat((crop.y + crop.height / 2) / originalImgSize.y))
    );

    if (originalImgSize.x >= originalImgSize.y) {
      handleChangeParameter(
        'scale',
        String(roundFloat(crop.height / originalImgSize.y))
      );
    } else {
      handleChangeParameter(
        'scale',
        String(roundFloat(crop.width / originalImgSize.x))
      );
    }
  }

  function getImgSize() {
    console.log('execute getImgSize');
    var element: HTMLImageElement | null = document.getElementById(
      'crop'
    ) as HTMLImageElement;
    if (element == null) return;
    var width = element.naturalWidth;
    var height = element.naturalHeight;
    handleChangeOriginalImgSize('x', width);
    handleChangeOriginalImgSize('y', height);
    setIsGetOriginalImgSize(true);
  }

  // 数値の小数点以下を丸める関数．デフォルトでは小数点第三位以下を切り捨てする仕様にした．
  function roundFloat(input: number, digit = 100) {
    return Math.round(input * digit) / digit;
  }

  function handleChangeFormValues(name: string, value: string) {
    setFormValues((prev) => ({ ...prev, [name]: value }));
  }

  function handleChangeParameter(name: string, value: string) {
    console.log(`${name};${value}`);
    setParameters((prev) => ({ ...prev, [name]: value }));
  }

  function handleChangeOriginalImgSize(name: string, value: number) {
    console.log(`${name};${value}`);
    setOriginalImgSize((prev) => ({ ...prev, [name]: value }));
  }

  return (
    <div>
      <Head>
        <title>Design QRcode Generator</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Flex flexDirection={'column'} alignItems={'center'} py={'12'}>
        <Heading size={'3xl'}>Design QRcode Generator</Heading>
        {displayMode == DisplayMode.SelectImg && (
          <>
            <Text fontSize={'2xl'} pt={'4'}>
              QRコードの背景画像に設定する画像を選択してください．
            </Text>
            <FormControl w="xl">
              <Input
                mt="4"
                type="file"
                accept="image/*,.png,.jpg,.jpeg,"
                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                  handleOnAddImage(e);
                }}
              />
            </FormControl>
          </>
        )}
        {displayMode == DisplayMode.CropImg && (
          <>
            <Text fontSize={'2xl'} pt={'4'}>
              QRコード化する範囲を指定してください．
            </Text>
            <ReactCrop
              crop={crop}
              aspect={1}
              onChange={(c) => {
                if (!isGetOriginalImgSize) getImgSize();
                setCrop(c);
                console.log(crop);
                calculateParameters();
              }}
            >
              <img
                id="crop"
                src={`${formValues.img_string}`}
                alt="切り抜き前画像"
              />
            </ReactCrop>
            <Flex mt="4" gap="8">
              <Button
                colorScheme="facebook"
                onClick={() => {
                  console.log('clicked 確定 button');
                  handleChangeFormValues('scale', parameters.scale);
                  handleChangeFormValues('x_axis', parameters.x_axis);
                  handleChangeFormValues('y_axis', parameters.y_axis);
                  setDisplayMode(DisplayMode.InputParameter);
                }}
              >
                確定
              </Button>
              <Button
                colorScheme="green"
                onClick={() => {
                  console.log('clicked 必要パラメータ算出 button');
                  console.log(parameters);
                }}
              >
                必要パラメータを算出
              </Button>
            </Flex>
          </>
        )}
        {displayMode == DisplayMode.InputParameter && (
          <>
            {formItems.map((item) => (
              <>
                <FormLabel htmlFor="name">{item.name}</FormLabel>
                <Input
                  key={item.label}
                  w="xl"
                  id={item.label}
                  variant="filled"
                  value={formValues[item.label]}
                  placeholder={item.label}
                  onChange={(e) =>
                    handleChangeFormValues(item.label, e.target.value)
                  }
                />
              </>
            ))}
          </>
        )}
        <Button
          onClick={() => {
            console.log(formValues);
          }}
        >
          test
        </Button>
      </Flex>
    </div>
  );
};

export default Home;
