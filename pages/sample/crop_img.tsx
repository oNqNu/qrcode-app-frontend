/* eslint-disable @next/next/no-img-element */
import type { NextPage } from 'next';
import { Button, Flex, Heading, Text } from '@chakra-ui/react';
import Head from 'next/head';
import { useState } from 'react';
import ReactCrop, { Crop } from 'react-image-crop';
import 'react-image-crop/dist/ReactCrop.css';

const CropImg: NextPage = () => {
  const [imgStr, setImgStr] = useState('');
  const [isgeneratedQrcode, setIsgeneratedQrcode] = useState(false);
  const [crop, setCrop] = useState<Crop>({
    unit: 'px', // Can be 'px' or '%'
    x: 25,
    y: 25,
    width: 50,
    height: 50,
  });

  return (
    <div>
      <Head>
        <title>Design QRcode Generator</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Flex flexDirection={'column'} alignItems={'center'} py={'12'}>
        <Heading size={'3xl'}>Design QRcode Generator</Heading>
        <Text fontSize={'2xl'} pt={'4'}>
          画像切り抜き処理サンプル
        </Text>
        <ReactCrop
          crop={crop}
          aspect={1}
          onChange={(c) => {
            setCrop(c);
            console.log(crop);
          }}
        >
          <img id="crop" src="/abe.jpg" alt="切り抜き前画像" />
        </ReactCrop>
        <Flex mt="4" gap="8">
          <Button
            colorScheme="facebook"
            onClick={() => {
              console.log('clicked 画像サイズ取得 button');
              var element: HTMLImageElement | null = document.getElementById(
                'crop'
              ) as HTMLImageElement;
              if (element == null) return;
              var width = element.naturalWidth;
              var height = element.naturalHeight;
              console.log(width);
              console.log(height);
            }}
          >
            画像サイズ取得
          </Button>
          <Button colorScheme="green">必要パラメータを算出</Button>
        </Flex>
      </Flex>
    </div>
  );
};

export default CropImg;
